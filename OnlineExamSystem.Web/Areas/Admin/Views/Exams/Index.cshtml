@model IEnumerable<OnlineExamSystem.Web.ViewModels.AdminExamViewModel>
@{
    ViewData["Title"] = "Exams Management";
}
@Html.AntiForgeryToken()

<div class="bg-darksurface border border-darkborder rounded-xl overflow-hidden">
        <div class="flex justify-between items-center p-6">
            <div class="relative flex-1 max-w-md">
                <input
                    type="text"
                    placeholder="Search exams..."
                    class="w-full bg-darkbg border border-darkborder rounded-lg py-2 px-4 pr-10 focus:outline-none focus:ring-2 focus:ring-darkprimary/50"
                />
                <i
                    class="fas fa-search absolute right-3 top-1/2 -translate-y-1/2 text-gray-400"
                ></i>
            </div>
            <button
              class="bg-darkprimary hover:bg-darkprimary/90 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
            >
            <a asp-controller="Exams" asp-action="Create"><i class="fas fa-plus"></i> Create Exam</a>

              
            </button>
        </div>

        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr class="border-b border-darkborder">
                        <th class="py-3 px-4 text-left">ID</th>
                        <th class="py-3 px-4 text-left">Title</th>
                        <th class="py-3 px-4 text-left">Description</th>
                        <th class="py-3 px-4 text-left">Questions</th>
                        <th class="py-3 px-4 text-left">Participants</th>
                        <th class="py-3 px-4 text-left">Created By</th>
                        <th class="py-3 px-4 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var exam in Model)
                    {
                        <tr class="border-b border-darkborder hover:bg-darkbg/50 transition-colors">
                            <td class="py-3 px-4">@exam.Id</td>
                            <td class="py-3 px-4">
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 bg-darkprimary rounded-full flex items-center justify-center text-white font-semibold">@exam.Title.Substring(0, Math.Min(2, exam.Title.Length))</div>
                                    <span>@exam.Title</span>
                                </div>
                            </td>
                            <td class="py-3 px-4">@(exam.Description.Length > 30 ? exam.Description.Substring(0, 30) + "..." : exam.Description)</td>
                            <td class="py-3 px-4">@exam.Questions</td>
                            <td class="py-3 px-4">@exam.Participants</td>
                            <td class="py-3 px-4">@exam.CreatedBy</td>
                            <td class="py-3 px-4">
                                <div class="flex gap-2">
                                    <a asp-action="Edit" asp-route-id="@exam.Id" class="text-darkprimary hover:text-darkprimary/80 transition-colors">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button class="text-darkaccent hover:text-darkaccent/80 transition-colors">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                
                </tbody>
            </table>
        </div>

</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-darksurface border border-darkborder rounded-xl p-6 max-w-md w-full">
        <h3 class="text-xl font-semibold mb-4">Confirm Delete</h3>
        <p class="mb-6">Are you sure you want to delete this exam? This action cannot be undone.</p>
        <input type="hidden" id="examIdToDelete" value="" />
        <div class="flex justify-end gap-3">
            <button id="cancelDelete" class="px-4 py-2 border border-darkborder rounded-lg hover:bg-darkbg transition-colors">Cancel</button>
            <button id="confirmDelete" class="px-4 py-2 bg-darkaccent hover:bg-darkaccent/80 text-white rounded-lg transition-colors">Delete</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get the modal
            const deleteModal = document.getElementById('deleteModal');
            const examIdToDelete = document.getElementById('examIdToDelete');
            const cancelDelete = document.getElementById('cancelDelete');
            const confirmDelete = document.getElementById('confirmDelete');
            
            // Get all delete buttons
            const deleteButtons = document.querySelectorAll('.fa-trash-alt');
            
            // Add click event to all delete buttons
            deleteButtons.forEach(button => {
                button.parentElement.addEventListener('click', function(e) {
                    e.preventDefault();
                    const examId = this.closest('tr').querySelector('td:first-child').textContent;
                    examIdToDelete.value = examId;
                    deleteModal.classList.remove('hidden');
                    deleteModal.classList.add('flex');
                });
            });
            
            // Cancel delete
            cancelDelete.addEventListener('click', function() {
                deleteModal.classList.remove('flex');
                deleteModal.classList.add('hidden');
            });
            
            // Confirm delete
            confirmDelete.addEventListener('click', function() {
                const examId = examIdToDelete.value;
                
                // Get the anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                // Send delete request
                fetch(`/Admin/Exams/Delete/${examId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the row from the table
                        const rows = document.querySelectorAll('tbody tr');
                        rows.forEach(row => {
                            const idCell = row.querySelector('td:first-child');
                            if (idCell && idCell.textContent.trim() === examId) {
                                row.remove();
                            }
                        });
                        
                        // Close the modal
                        deleteModal.classList.remove('flex');
                        deleteModal.classList.add('hidden');
                    } else {
                        alert('Error deleting exam: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the exam.');
                });
            });
        });
    </script>
}